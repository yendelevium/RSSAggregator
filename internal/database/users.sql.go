// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id,created_at,update_at,name, api_key)
VALUES ($1,$2,$3,$4, encode(sha256(random()::text::bytea),'hex') )
RETURNING id, created_at, update_at, name, api_key
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdateAt  time.Time
	Name      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdateAt,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one


SELECT id, created_at, update_at, name, api_key FROM users WHERE api_key = $1
`

// The way sqlcn works is that it takes the sql query, and creates type-safe go code which matches the query
// The way sqlcn works is that it takes the sql query, and creates type-safe go code which matches the query
// Every sqlc query starts with an sql comment, name: <queryname> :<no.of records to be returned by this query>
// wtf are the $thingys u ask?
// In sqlc, each $number represent parameters for the function. This statement creates a function, which takes
// 4 arguments, and the first argument is put in place of $1 and so on
// RETURNING *; is that we r creating a new record, and we wanna return that record
// We always run sqlc from the root of our package, where the sqlc.yaml file is located
// we write sqlc generate in the cmd
// So what this does, is that sql has access to our schema and all queries,
// as specified in the sqlc.yaml file, and it goes and generates the go code in the internal/database repo,
// which was again specified in the sqlc.yaml file
func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}
